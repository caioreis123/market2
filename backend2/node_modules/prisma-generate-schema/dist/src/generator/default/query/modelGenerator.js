"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var generator_1 = require("../../generator");
var ModelGenerator = /** @class */ (function (_super) {
    __extends(ModelGenerator, _super);
    function ModelGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ModelGenerator.prototype.getTypeName = function (input, args) {
        return input.name;
    };
    ModelGenerator.prototype.generateRelationField = function (model, a, field) {
        var argumentsList = {};
        if (!field.type.isEmbedded) {
            argumentsList = field.isList
                ? this.generators.manyQueryArguments.generate(field.type, {
                    relatedField: field,
                    relatedType: model,
                    relationName: null,
                })
                : this.generators.oneQueryArguments.generate(field.type, {
                    relatedField: field,
                    relatedType: model,
                    relationName: null,
                });
        }
        return {
            type: this.generators.scalarTypeGenerator.wraphWithModifiers(field, this.generators.model.generate(field.type, {})),
            args: argumentsList,
        };
    };
    return ModelGenerator;
}(generator_1.ModelObjectTypeGenerator));
exports.default = ModelGenerator;
//# sourceMappingURL=modelGenerator.js.map