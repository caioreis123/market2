{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { request as httpRequest, IncomingMessage, ClientRequest } from 'http'\nimport { request as httpsRequest } from 'https'\nimport { PassThrough } from 'stream'\nimport urlLib = require('url')\nimport concat = require('concat-stream')\nimport { CookieJar } from 'tough-cookie'\nimport { createUnzip } from 'zlib'\nimport { Headers } from './base'\nimport { Request, TransportOptions, Middleware } from './request'\nimport { Response } from './response'\nimport { stringify, headers } from './plugins/index'\n\nexport type Types = 'text' | 'buffer' | 'array' | 'uint8array' | 'stream' | string\n\n/**\n * List of valid node response types.\n */\nconst validTypes = ['text', 'buffer', 'array', 'uint8array', 'stream']\n\n/**\n * Node transport options.\n */\nexport interface Options {\n  type?: Types\n  unzip?: boolean\n  jar?: CookieJar\n  agent?: any\n  maxRedirects?: number\n  rejectUnauthorized?: boolean\n  followRedirects?: boolean\n  confirmRedirect?: (request: ClientRequest, response: IncomingMessage) => boolean\n  ca?: string | Buffer | Array<string | Buffer>\n  cert?: string | Buffer\n  key?: string | Buffer\n  maxBufferSize?: number\n}\n\n/**\n * Create a transport object.\n */\nexport function createTransport (options: Options): TransportOptions {\n  return {\n    use,\n    abort,\n    open (request: Request) {\n      return handle(request, options)\n    }\n  }\n}\n\n/**\n * Default uses.\n */\nconst use: Middleware[] = [stringify(), headers()]\n\n/**\n * Redirection types to handle.\n */\nenum REDIRECT_TYPE {\n  FOLLOW_WITH_GET,\n  FOLLOW_WITH_CONFIRMATION\n}\n\n/**\n * Possible redirection status codes.\n */\nconst REDIRECT_STATUS: { [status: number]: number } = {\n  '301': REDIRECT_TYPE.FOLLOW_WITH_GET,\n  '302': REDIRECT_TYPE.FOLLOW_WITH_GET,\n  '303': REDIRECT_TYPE.FOLLOW_WITH_GET,\n  '307': REDIRECT_TYPE.FOLLOW_WITH_CONFIRMATION,\n  '308': REDIRECT_TYPE.FOLLOW_WITH_CONFIRMATION\n}\n\n/**\n * Open a HTTP request with node.\n */\nfunction handle (request: Request, options: Options): Promise<Response> {\n  const { followRedirects, type, unzip, rejectUnauthorized, ca, key, cert, agent } = options\n  const { url, method, body } = request\n  const maxRedirects = num(options.maxRedirects, 5)\n  const maxBufferSize = num(options.maxBufferSize, type === 'stream' ? Infinity : 2 * 1000 * 1000)\n  const storeCookies = getStoreCookies(options)\n  const attachCookies = getAttachCookies(request, options)\n  const confirmRedirect = options.confirmRedirect || falsey\n  let requestCount = 0\n\n  if (type && validTypes.indexOf(type) === -1) {\n    return Promise.reject(\n      request.error(`Unsupported type: ${type}`, 'ETYPE')\n    )\n  }\n\n  // Automatically enable unzipping.\n  if (unzip !== false && request.get('Accept-Encoding') == null) {\n    request.set('Accept-Encoding', 'gzip,deflate')\n  }\n\n  /**\n   * Create the HTTP request, in a way we can re-use this.\n   */\n  function get (url: string, method: string, body?: any): Promise<Response> {\n    // Check redirection count before executing request.\n    if (requestCount++ > maxRedirects) {\n      return Promise.reject(\n        request.error(`Exceeded maximum of ${maxRedirects} redirects`, 'EMAXREDIRECTS')\n      )\n    }\n\n    return attachCookies(url)\n      .then(function () {\n        return new Promise<Response>((resolve, reject) => {\n          const arg: any = urlLib.parse(url)\n          const isHttp = arg.protocol !== 'https:'\n          const engine: typeof httpRequest = isHttp ? httpRequest : httpsRequest\n\n          // Attach request options.\n          arg.method = method\n          arg.headers = request.toHeaders()\n          arg.agent = agent\n          arg.rejectUnauthorized = rejectUnauthorized !== false\n          arg.ca = ca\n          arg.cert = cert\n          arg.key = key\n\n          const rawRequest = engine(arg)\n\n          // Track upload/download progress through a stream.\n          const requestStream = new PassThrough()\n          const responseStream = new PassThrough()\n          let uploadedBytes = 0\n          let downloadedBytes = 0\n\n          requestStream.on('data', function (chunk: Buffer) {\n            uploadedBytes += chunk.length\n            request._setUploadedBytes(uploadedBytes)\n          })\n\n          requestStream.on('end', function () {\n            request._setUploadedBytes(uploadedBytes, 1)\n          })\n\n          responseStream.on('data', function (chunk: Buffer) {\n            downloadedBytes += chunk.length\n            request._setDownloadedBytes(downloadedBytes)\n\n            // Abort on the max buffer size.\n            if (downloadedBytes > maxBufferSize) {\n              rawRequest.abort()\n              responseStream.emit('error', request.error('Response too large', 'ETOOLARGE'))\n            }\n          })\n\n          responseStream.on('end', function () {\n            request._setDownloadedBytes(downloadedBytes, 1)\n          })\n\n          // Handle the HTTP response.\n          function response (incomingMessage: IncomingMessage) {\n            const { headers, rawHeaders, statusCode: status, statusMessage: statusText } = incomingMessage\n            const redirect = REDIRECT_STATUS[status]\n\n            // Handle HTTP redirects.\n            if (followRedirects !== false && redirect != null && headers.location) {\n              const newUrl = urlLib.resolve(url, String(headers.location))\n\n              // Ignore the result of the response on redirect.\n              incomingMessage.resume()\n\n              if (redirect === REDIRECT_TYPE.FOLLOW_WITH_GET) {\n                // Update the \"Content-Length\" for updated redirection body.\n                request.set('Content-Length', '0')\n\n                return get(newUrl, arg.method === 'HEAD' ? 'HEAD' : 'GET')\n              }\n\n              if (redirect === REDIRECT_TYPE.FOLLOW_WITH_CONFIRMATION) {\n                // Following HTTP spec by automatically redirecting with GET/HEAD.\n                if (arg.method === 'GET' || arg.method === 'HEAD') {\n                  return get(newUrl, method, body)\n                }\n\n                // Allow the user to confirm redirect according to HTTP spec.\n                if (confirmRedirect(rawRequest, incomingMessage)) {\n                  return get(newUrl, method, body)\n                }\n              }\n            }\n\n            request.downloadLength = num(headers['content-length'], null)\n            incomingMessage.pipe(responseStream)\n\n            return handleResponse(responseStream, headers, options)\n              .then(function (body) {\n                return new Response({\n                  status,\n                  headers,\n                  statusText,\n                  rawHeaders,\n                  body,\n                  url\n                })\n              })\n          }\n\n          // Emit a request error.\n          function emitError (error: Error) {\n            // Abort request on error.\n            rawRequest.abort()\n            reject(error)\n          }\n\n          rawRequest.on('response', function (message: IncomingMessage) {\n            resolve(storeCookies(url, message.headers).then(() => response(message)))\n          })\n\n          rawRequest.on('error', function (error: Error) {\n            emitError(request.error(`Unable to connect to \"${url}\"`, 'EUNAVAILABLE', error))\n          })\n\n          request._raw = rawRequest\n          request.uploadLength = num(rawRequest.getHeader('content-length'), null)\n          requestStream.pipe(rawRequest)\n          requestStream.on('error', emitError)\n\n          // Pipe the body to the stream.\n          if (body) {\n            if (typeof body.pipe === 'function') {\n              body.pipe(requestStream)\n              body.on('error', emitError)\n            } else {\n              requestStream.end(body)\n            }\n          } else {\n            requestStream.end()\n          }\n        })\n      })\n  }\n\n  return get(url, method, body)\n}\n\n/**\n * Close the current HTTP request.\n */\nfunction abort (request: Request) {\n  request._raw.abort()\n}\n\n/**\n * Parse a value into a number.\n */\nfunction num (value: any, fallback?: number) {\n  if (value == null) {\n    return fallback\n  }\n\n  return isNaN(value) ? fallback : Number(value)\n}\n\n/**\n * Used to check redirection support.\n */\nfunction falsey () {\n  return false\n}\n\n/**\n * Read cookies from the cookie jar.\n */\nfunction getAttachCookies (request: Request, options: Options): (url: string) => Promise<any> {\n  const requestCookieString = request.getAll('Cookie').join('; ')\n\n  if (!options.jar) {\n    return () => Promise.resolve()\n  }\n\n  return function (url: string) {\n    return new Promise(function (resolve, reject) {\n      let cookieString = requestCookieString\n\n      options.jar.getCookieString(url, function (err: Error, jarCookieString?: string) {\n        if (err) {\n          return reject(err)\n        }\n\n        if (jarCookieString) {\n          cookieString = cookieString ? `${cookieString}; ${jarCookieString}` : jarCookieString\n        }\n\n        if (cookieString) {\n          request.set('Cookie', cookieString)\n        }\n\n        return resolve()\n      })\n    })\n  }\n}\n\n/**\n * Put cookies in the cookie jar.\n */\nfunction getStoreCookies (options: Options): (url: string, headers: Headers) => Promise<any> {\n  const { jar } = options\n\n  if (!jar) {\n    return () => Promise.resolve()\n  }\n\n  return function (url, headers) {\n    const cookies = headers['set-cookie']\n\n    if (!cookies) {\n      return Promise.resolve()\n    }\n\n    const storeCookies = (Array.isArray(cookies) ? cookies : [cookies]).map(function (cookie) {\n      return new Promise(function (resolve, reject) {\n        jar.setCookie(cookie, url, { ignoreError: true }, function (err: Error) {\n          return err ? reject(err) : resolve()\n        })\n      })\n    })\n\n    return Promise.all(storeCookies)\n  }\n}\n\n/**\n * Handle the HTTP response body encoding.\n */\nfunction handleResponse (\n  stream: PassThrough,\n  headers: { [key: string]: any },\n  options: Options\n) {\n  const type = options.type || 'text'\n  const unzip = options.unzip !== false\n\n  const result = new Promise<any>((resolve, reject) => {\n    if (unzip) {\n      const enc = headers['content-encoding']\n\n      if (enc === 'deflate' || enc === 'gzip') {\n        const unzip = createUnzip()\n        stream.pipe(unzip)\n        stream.on('error', (err: Error) => unzip.emit('error', err))\n        stream = unzip\n      }\n    }\n\n    // Return the raw stream.\n    if (type === 'stream') {\n      return resolve(stream)\n    }\n\n    const encoding = type === 'text' ? 'string' : type\n    const concatStream = concat({ encoding }, resolve)\n\n    stream.on('error', reject)\n    stream.pipe(concatStream)\n  })\n\n  return result\n}\n"]}