"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var type_1 = require("graphql/type");
var prisma_datamodel_1 = require("prisma-datamodel");
var generator_1 = require("../../../generator");
var ModelUpsertWithoutRelatedInputGenerator = /** @class */ (function (_super) {
    __extends(ModelUpsertWithoutRelatedInputGenerator, _super);
    function ModelUpsertWithoutRelatedInputGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ModelUpsertWithoutRelatedInputGenerator.prototype.getTypeName = function (input, args) {
        var field = args.relatedField.relatedField;
        return input.name + "UpsertWithout" + prisma_datamodel_1.capitalize(field.name) + "Input";
    };
    ModelUpsertWithoutRelatedInputGenerator.prototype.generateWhereUnique = function (model, args, fields) {
        // Do nothing - work is done in subclass
    };
    ModelUpsertWithoutRelatedInputGenerator.prototype.generateFields = function (model, args) {
        var fields = {};
        this.generateWhereUnique(model, args, fields);
        if (!this.generators.modelUpdateWithoutRelatedDataInput.wouldBeEmpty(model, args)) {
            fields.update = {
                type: new type_1.GraphQLNonNull(this.generators.modelUpdateWithoutRelatedDataInput.generate(model, args)),
            };
        }
        if (!this.generators.modelCreateWithoutRelatedInput.wouldBeEmpty(model, args)) {
            fields.create = {
                type: new type_1.GraphQLNonNull(this.generators.modelCreateWithoutRelatedInput.generate(model, args)),
            };
        }
        return fields;
    };
    return ModelUpsertWithoutRelatedInputGenerator;
}(generator_1.RelatedModelInputObjectTypeGenerator));
exports.default = ModelUpsertWithoutRelatedInputGenerator;
//# sourceMappingURL=modelUpsertWithoutRelatedInputGenerator.js.map