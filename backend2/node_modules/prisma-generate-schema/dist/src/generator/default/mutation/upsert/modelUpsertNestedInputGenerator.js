"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var type_1 = require("graphql/type");
var generator_1 = require("../../../generator");
var ModelUpsertNestedInputGenerator = /** @class */ (function (_super) {
    __extends(ModelUpsertNestedInputGenerator, _super);
    function ModelUpsertNestedInputGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ModelUpsertNestedInputGenerator.prototype.getTypeName = function (input, args) {
        return input.name + "UpsertNestedInput";
    };
    ModelUpsertNestedInputGenerator.prototype.generateWhereUnique = function (model, args, fields) {
        // Do nothing - work is done in subclass
    };
    ModelUpsertNestedInputGenerator.prototype.generateFields = function (model, args) {
        var fields = {};
        this.generateWhereUnique(model, args, fields);
        fields.update = {
            type: new type_1.GraphQLNonNull(this.generators.modelUpdateDataInput.generate(model, args)),
        };
        fields.create = {
            type: new type_1.GraphQLNonNull(this.generators.modelCreateInput.generate(model, args)),
        };
        return fields;
    };
    return ModelUpsertNestedInputGenerator;
}(generator_1.ModelInputObjectTypeGenerator));
exports.default = ModelUpsertNestedInputGenerator;
//# sourceMappingURL=modelUpsertNestedInputGenerator.js.map