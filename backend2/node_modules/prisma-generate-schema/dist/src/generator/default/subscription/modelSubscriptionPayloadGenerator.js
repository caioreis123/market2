"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var type_1 = require("graphql/type");
var generator_1 = require("../../generator");
var ModelSubscriptionPayloadGenerator = /** @class */ (function (_super) {
    __extends(ModelSubscriptionPayloadGenerator, _super);
    function ModelSubscriptionPayloadGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ModelSubscriptionPayloadGenerator.prototype.getTypeName = function (input, args) {
        return input.name + "SubscriptionPayload";
    };
    ModelSubscriptionPayloadGenerator.prototype.generateFields = function (input, args) {
        var payload = {
            mutation: {
                type: new type_1.GraphQLNonNull(this.generators.mutationType.generate(null, {})),
            },
            node: { type: this.generators.model.generate(input, {}) },
            updatedFields: {
                type: new type_1.GraphQLList(new type_1.GraphQLNonNull(type_1.GraphQLString)),
            },
        };
        if (this.hasScalarFields(input.fields)) {
            payload.previousValues = {
                type: this.generators.modelPreviousValues.generate(input, {}),
            };
        }
        return payload;
    };
    return ModelSubscriptionPayloadGenerator;
}(generator_1.ModelObjectTypeGenerator));
exports.default = ModelSubscriptionPayloadGenerator;
//# sourceMappingURL=modelSubscriptionPayloadGenerator.js.map