"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var generator_1 = require("../../../generator");
var prisma_datamodel_1 = require("prisma-datamodel");
var ModelUpdateOneWithoutRelatedInputTypeGenerator = /** @class */ (function (_super) {
    __extends(ModelUpdateOneWithoutRelatedInputTypeGenerator, _super);
    function ModelUpdateOneWithoutRelatedInputTypeGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ModelUpdateOneWithoutRelatedInputTypeGenerator.prototype.getTypeName = function (input, args) {
        var field = args.relatedField.relatedField;
        return input.name + "UpdateOneRequiredWithout" + prisma_datamodel_1.capitalize(field.name) + "Input";
    };
    ModelUpdateOneWithoutRelatedInputTypeGenerator.prototype.generateFields = function (model, args) {
        var fields = {};
        if (this.hasFieldsExcept(this.getCreateInputFields(model.fields), args.relatedField.relatedField.name)) {
            fields.create = {
                type: this.generators.modelCreateWithoutRelatedInput.generate(model, args),
            };
        }
        if (this.hasFieldsExcept(this.getWriteableFields(model.fields), args.relatedField.relatedField.name)) {
            fields.update = {
                type: this.generators.modelUpdateWithoutRelatedDataInput.generate(model, args),
            };
            fields.upsert = {
                type: this.generators.modelUpsertWithoutRelatedInput.generate(model, args),
            };
        }
        if (!this.generators.modelWhereUniqueInput.wouldBeEmpty(model, args)) {
            fields.connect = {
                type: this.generators.modelWhereUniqueInput.generate(model, args),
            };
        }
        return fields;
    };
    return ModelUpdateOneWithoutRelatedInputTypeGenerator;
}(generator_1.RelatedModelInputObjectTypeGenerator));
exports.default = ModelUpdateOneWithoutRelatedInputTypeGenerator;
//# sourceMappingURL=modelUpdateOneRequiredWithoutRelatedInputGenerator.js.map