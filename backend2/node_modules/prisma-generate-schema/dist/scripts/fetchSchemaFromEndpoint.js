"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var popsicle = require("popsicle");
var utilities_1 = require("graphql/utilities");
var graphql_1 = require("graphql");
if (process.argv.length < 3) {
    console.error('Usage: ts-node fetschSchemaFromEndpoint.ts ENDPOINT');
    process.exit(1);
}
var endpoint = process.argv[2];
popsicle
    .post({
    url: endpoint,
    body: {
        query: utilities_1.introspectionQuery,
    },
    transport: popsicle.createTransport({
        type: 'text',
        maxBufferSize: 500 * 1024 * 1024,
    }),
})
    .then(function (response) {
    var schema = JSON.parse(response.body).data;
    var sdl = utilities_1.printSchema(utilities_1.buildClientSchema(schema));
    var parsedSdl = graphql_1.parse(sdl);
    var mutatedSdl = graphql_1.visit(parsedSdl, {
        ObjectTypeDefinition: {
            enter: function (node) {
                if (!['Query', 'Mutation', 'Subscription'].includes(node.name.value)) {
                    var nodeWithValidFields = graphql_1.visit(node, {
                        FieldDefinition: {
                            enter: function (fieldNode) {
                                if ((fieldNode.arguments &&
                                    fieldNode.arguments.length > 0 &&
                                    fieldNode.type.kind === 'NamedType') ||
                                    (fieldNode.type.kind === 'NonNullType' &&
                                        !graphql_1.isScalarType(fieldNode.type))) {
                                    return __assign({}, fieldNode, { arguments: fieldNode.arguments
                                            ? fieldNode.arguments.filter(function (arg) { return arg.name.value !== 'where'; })
                                            : [] });
                                }
                                else {
                                    return fieldNode;
                                }
                            },
                        },
                    });
                    return nodeWithValidFields;
                }
            },
        },
        EnumTypeDefinition: {
            enter: function (enumNode) {
                if (enumNode.name.value === 'PrismaDatabase') {
                    return null;
                }
            },
        },
        FieldDefinition: {
            enter: function (fieldNode) {
                if (fieldNode.name.value === 'executeRaw') {
                    return null;
                }
            },
        },
    });
    console.log(graphql_1.print(mutatedSdl));
})
    .catch(function (error) {
    console.error(error);
});
//# sourceMappingURL=fetchSchemaFromEndpoint.js.map