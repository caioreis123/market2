"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var modelWhereInputGenerator_1 = require("../../default/query/modelWhereInputGenerator");
var ModelWhereInputGenerator = /** @class */ (function (_super) {
    __extends(ModelWhereInputGenerator, _super);
    function ModelWhereInputGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ModelWhereInputGenerator.prototype.generateManyRelationFilterFields = function (field) {
        var fieldType = field.type;
        var whereType = this.generate(fieldType, {});
        var restrictedWhereType = this.generators.modelRestrictedWhereInput.generate(fieldType, {});
        if (fieldType.isEmbedded) {
            return __assign({}, modelWhereInputGenerator_1.default.generateFiltersForSuffix(['_some'], field, whereType), modelWhereInputGenerator_1.default.generateFiltersForSuffix(['_every', '_none'], field, restrictedWhereType));
        }
        else {
            return modelWhereInputGenerator_1.default.generateFiltersForSuffix(['_some'], field, whereType);
        }
    };
    ModelWhereInputGenerator.prototype.getLogicalOperators = function () {
        return ['AND'];
    };
    ModelWhereInputGenerator.prototype.getRelationaManyFilters = function (type) {
        throw new Error('Not implemented, not needed.');
    };
    return ModelWhereInputGenerator;
}(modelWhereInputGenerator_1.default));
exports.default = ModelWhereInputGenerator;
//# sourceMappingURL=modelWhereInputGenerator.js.map