"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
function extractFragmentReplacements(resolvers) {
    var allFragmentReplacements = [];
    /* Collect fragments */
    for (var typeName in resolvers) {
        var fieldResolvers = resolvers[typeName];
        for (var fieldName in fieldResolvers) {
            var fieldResolver = fieldResolvers[fieldName];
            if (typeof fieldResolver === 'object' && fieldResolver.fragment) {
                allFragmentReplacements.push({
                    field: fieldName,
                    fragment: fieldResolver.fragment,
                });
            }
            if (typeof fieldResolver === 'object' && fieldResolver.fragments) {
                for (var fragmentKey in fieldResolver.fragments) {
                    allFragmentReplacements.push({
                        field: fieldName,
                        fragment: fieldResolver.fragments[fragmentKey],
                    });
                }
            }
        }
    }
    /* Filter and map circular dependencies */
    var fragmentReplacements = allFragmentReplacements
        .map(function (fragmentReplacement) {
        var fragment = parseFragmentToInlineFragment(fragmentReplacement.fragment);
        var newSelections = fragment.selectionSet.selections.filter(function (node) {
            switch (node.kind) {
                case 'Field': {
                    return node.name.value !== fragmentReplacement.field;
                }
                default: {
                    return true;
                }
            }
        });
        if (newSelections.length === 0) {
            return null;
        }
        var newFragment = __assign({}, fragment, { selectionSet: {
                kind: fragment.selectionSet.kind,
                loc: fragment.selectionSet.loc,
                selections: newSelections,
            } });
        var parsedFragment = graphql_1.print(newFragment);
        return {
            field: fragmentReplacement.field,
            fragment: parsedFragment,
        };
    })
        .filter(function (fr) { return fr !== null; });
    return fragmentReplacements;
    /* Helper functions */
    function parseFragmentToInlineFragment(definitions) {
        if (definitions.trim().startsWith('fragment')) {
            var document_1 = graphql_1.parse(definitions);
            for (var _i = 0, _a = document_1.definitions; _i < _a.length; _i++) {
                var definition = _a[_i];
                if (definition.kind === graphql_1.Kind.FRAGMENT_DEFINITION) {
                    return {
                        kind: graphql_1.Kind.INLINE_FRAGMENT,
                        typeCondition: definition.typeCondition,
                        selectionSet: definition.selectionSet,
                    };
                }
            }
        }
        var query = graphql_1.parse("{" + definitions + "}")
            .definitions[0];
        for (var _b = 0, _c = query.selectionSet.selections; _b < _c.length; _b++) {
            var selection = _c[_b];
            if (selection.kind === graphql_1.Kind.INLINE_FRAGMENT) {
                return selection;
            }
        }
        throw new Error('Could not parse fragment');
    }
}
exports.extractFragmentReplacements = extractFragmentReplacements;
//# sourceMappingURL=fragments.js.map