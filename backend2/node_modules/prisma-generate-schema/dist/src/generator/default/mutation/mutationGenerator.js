"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var generator_1 = require("../../generator");
var prisma_datamodel_1 = require("prisma-datamodel");
var type_1 = require("graphql/type");
var MutationGenerator = /** @class */ (function (_super) {
    __extends(MutationGenerator, _super);
    function MutationGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MutationGenerator.prototype.getTypeName = function (input, args) {
        return 'Mutation';
    };
    MutationGenerator.prototype.generateInternal = function (input, args) {
        var _this = this;
        var fieldMaps = input
            .filter(function (type) { return !type.isEnum && !type.isEmbedded; })
            .map(function (type) {
            return generator_1.FieldConfigUtils.merge(_this.generateCreateField(type), _this.generateUpdateField(type), _this.generateUpdateManyField(type), _this.generateUpsertField(type), _this.generateDeleteField(type), _this.generateDeleteManyField(type));
        });
        return new type_1.GraphQLObjectType({
            name: this.getTypeName(input, args),
            fields: generator_1.FieldConfigUtils.merge.apply(generator_1.FieldConfigUtils, fieldMaps),
        });
    };
    MutationGenerator.prototype.generateCreateField = function (model) {
        var fields = {};
        // TODO: model.fields.length === 0 should be encapuslated in the respective "wouldBeEmpty" or another helper function
        var wouldBeEmpty = this.generators.modelCreateInput.wouldBeEmpty(model, {});
        fields["create" + model.name] = {
            type: new type_1.GraphQLNonNull(this.generators.model.generate(model, {})),
            args: wouldBeEmpty
                ? {}
                : {
                    data: {
                        type: new type_1.GraphQLNonNull(this.generators.modelCreateInput.generate(model, {})),
                    },
                },
        };
        return fields;
    };
    MutationGenerator.prototype.generateUpdateField = function (model) {
        var fields = {};
        if (this.generators.modelUpdateInput.wouldBeEmpty(model, {})) {
            return fields;
        }
        if (this.generators.modelWhereUniqueInput.wouldBeEmpty(model, {})) {
            return fields;
        }
        fields["update" + model.name] = {
            type: this.generators.model.generate(model, {}),
            args: {
                data: {
                    type: new type_1.GraphQLNonNull(this.generators.modelUpdateInput.generate(model, {})),
                },
                where: {
                    type: new type_1.GraphQLNonNull(this.generators.modelWhereUniqueInput.generate(model, {})),
                },
            },
        };
        return fields;
    };
    MutationGenerator.prototype.generateUpdateManyField = function (model) {
        var fields = {};
        if (this.generators.modelUpdateManyMutationInput.wouldBeEmpty(model, {})) {
            return fields;
        }
        if (this.generators.modelWhereInput.wouldBeEmpty(model, {})) {
            return fields;
        }
        fields["updateMany" + prisma_datamodel_1.plural(model.name)] = {
            type: new type_1.GraphQLNonNull(this.generators.batchPayload.generate(null, {})),
            args: {
                data: {
                    type: new type_1.GraphQLNonNull(this.generators.modelUpdateManyMutationInput.generate(model, {})),
                },
                where: { type: this.generators.modelWhereInput.generate(model, {}) },
            },
        };
        return fields;
    };
    MutationGenerator.prototype.generateUpsertField = function (model) {
        var fields = {};
        if (this.generators.modelCreateInput.wouldBeEmpty(model, {})) {
            return fields;
        }
        if (this.generators.modelUpdateInput.wouldBeEmpty(model, {})) {
            return fields;
        }
        if (this.generators.modelWhereUniqueInput.wouldBeEmpty(model, {})) {
            return fields;
        }
        fields["upsert" + model.name] = {
            type: new type_1.GraphQLNonNull(this.generators.model.generate(model, {})),
            args: {
                where: {
                    type: new type_1.GraphQLNonNull(this.generators.modelWhereUniqueInput.generate(model, {})),
                },
                create: {
                    type: new type_1.GraphQLNonNull(this.generators.modelCreateInput.generate(model, {})),
                },
                update: {
                    type: new type_1.GraphQLNonNull(this.generators.modelUpdateInput.generate(model, {})),
                },
            },
        };
        return fields;
    };
    MutationGenerator.prototype.generateDeleteField = function (model) {
        var fields = {};
        if (this.generators.modelWhereUniqueInput.wouldBeEmpty(model, {})) {
            return fields;
        }
        fields["delete" + model.name] = {
            type: this.generators.model.generate(model, {}),
            args: {
                where: {
                    type: new type_1.GraphQLNonNull(this.generators.modelWhereUniqueInput.generate(model, {})),
                },
            },
        };
        return fields;
    };
    MutationGenerator.prototype.generateDeleteManyField = function (model) {
        var fields = {};
        if (this.generators.modelWhereInput.wouldBeEmpty(model, {})) {
            return fields;
        }
        fields["deleteMany" + prisma_datamodel_1.plural(model.name)] = {
            type: new type_1.GraphQLNonNull(this.generators.batchPayload.generate(null, {})),
            args: {
                where: { type: this.generators.modelWhereInput.generate(model, {}) },
            },
        };
        return fields;
    };
    return MutationGenerator;
}(generator_1.RootGenerator));
exports.default = MutationGenerator;
//# sourceMappingURL=mutationGenerator.js.map