{"version":3,"sources":["../src/inflate.js"],"names":["inflate","node","index","path","id","__typename","route","join","fieldNames","Object","keys","result","fieldName","value","Array","isArray","map","childNode","concat","response"],"mappings":";;;;;;;AAEA;AACA,MAAMA,UAAU,CAACC,IAAD,EAAeC,KAAf,EAA8BC,IAA9B,KAA+D;AAC7E,MAAIF,QAAQA,KAAKG,EAAb,IAAmBH,KAAKI,UAA5B,EAAwC;AACtC,UAAMC,QAAQH,KAAKI,IAAL,CAAU,GAAV,CAAd;;AAEA,QAAIL,MAAMI,KAAN,KAAgBJ,MAAMI,KAAN,EAAaL,KAAKI,UAAlB,CAAhB,IAAiDH,MAAMI,KAAN,EAAaL,KAAKI,UAAlB,EAA8BJ,KAAKG,EAAnC,CAArD,EAA6F;AAC3F,aAAOF,MAAMI,KAAN,EAAaL,KAAKI,UAAlB,EAA8BJ,KAAKG,EAAnC,CAAP;AACD;;AAED,QAAI,CAACF,MAAMI,KAAN,CAAL,EAAmB;AACjBJ,YAAMI,KAAN,IAAe,EAAf;AACD;;AAED,QAAI,CAACJ,MAAMI,KAAN,EAAaL,KAAKI,UAAlB,CAAL,EAAoC;AAClCH,YAAMI,KAAN,EAAaL,KAAKI,UAAlB,IAAgC,EAAhC;AACD;;AAEDH,UAAMI,KAAN,EAAaL,KAAKI,UAAlB,EAA8BJ,KAAKG,EAAnC,IAAyCH,IAAzC;AACD;;AAED,QAAMO,aAAaC,OAAOC,IAAP,CAAYT,IAAZ,CAAnB;;AAEA,QAAMU,SAAS,EAAf;;AAEA,OAAK,MAAMC,SAAX,IAAwBJ,UAAxB,EAAoC;AAClC,UAAMK,QAAQZ,KAAKW,SAAL,CAAd;;AAEA,QAAIE,MAAMC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACxBF,aAAOC,SAAP,IAAoBC,MAAMG,GAAN,CAAWC,SAAD,IAAe;AAC3C,YAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,iBAAOA,SAAP;AACD;;AAED,eAAOjB,QAAQiB,SAAR,EAAmBf,KAAnB,EAA0BC,KAAKe,MAAL,CAAY,CAACN,SAAD,CAAZ,CAA1B,CAAP;AACD,OANmB,CAApB;AAOD,KARD,MAQO,IAAI,OAAOC,KAAP,KAAiB,QAAjB,IAA6BA,UAAU,IAA3C,EAAiD;AACtDF,aAAOC,SAAP,IAAoBZ,QAAQa,KAAR,EAAeX,KAAf,EAAsBC,KAAKe,MAAL,CAAY,CAACN,SAAD,CAAZ,CAAtB,CAApB;AACD,KAFM,MAEA;AACLD,aAAOC,SAAP,IAAoBC,KAApB;AACD;AACF;;AAED,SAAOF,MAAP;AACD,CA1CD;;kBA4CgBQ,QAAD,IAAsB;AACnC,QAAMjB,QAAQ,EAAd;;AAEA,SAAOF,QAAQmB,QAAR,EAAkBjB,KAAlB,EAAyB,EAAzB,CAAP;AACD,C","file":"inflate.js","sourcesContent":["// @flow\n\n// eslint-disable-next-line complexity\nconst inflate = (node: Object, index: Object, path: $ReadOnlyArray<string>) => {\n  if (node && node.id && node.__typename) {\n    const route = path.join(',');\n\n    if (index[route] && index[route][node.__typename] && index[route][node.__typename][node.id]) {\n      return index[route][node.__typename][node.id];\n    }\n\n    if (!index[route]) {\n      index[route] = {};\n    }\n\n    if (!index[route][node.__typename]) {\n      index[route][node.__typename] = {};\n    }\n\n    index[route][node.__typename][node.id] = node;\n  }\n\n  const fieldNames = Object.keys(node);\n\n  const result = {};\n\n  for (const fieldName of fieldNames) {\n    const value = node[fieldName];\n\n    if (Array.isArray(value)) {\n      result[fieldName] = value.map((childNode) => {\n        if (typeof childNode === 'string') {\n          return childNode;\n        }\n\n        return inflate(childNode, index, path.concat([fieldName]));\n      });\n    } else if (typeof value === 'object' && value !== null) {\n      result[fieldName] = inflate(value, index, path.concat([fieldName]));\n    } else {\n      result[fieldName] = value;\n    }\n  }\n\n  return result;\n};\n\nexport default (response: Object) => {\n  const index = {};\n\n  return inflate(response, index, []);\n};\n"]}