import { GraphQLSchema } from 'graphql/type';
import { DatabaseType, ISDL } from 'prisma-datamodel';
/**
 * Schema generator factory for different database types.
 */
export { default as CRUDSchemaGenerator } from './generator';
/**
 * Computes the internal type representation for a model.
 * @param model The model in SDL as string.
 * @param databaseType: The database type implementation to use.
 * @returns An ISDL object containing all types present in the model.
 */
export declare function parseInternalTypes(model: string, databaseType: DatabaseType): ISDL;
/**
 * Computes a prisma prisma client CRUD schema for a given model.
 * @param model The model in SDL as string.
 * @param databaseType: The database type implementation to use.
 * @returns The prisma client CRUD schema as graphql-js schema object for the given model.
 */
export declare function generateCRUDSchema(model: string, databaseType: DatabaseType): GraphQLSchema;
/**
 * Creates a prisma client CRUD schema from a given model.
 * @param model The model as internal type datastructure (ISDL)
 * @param databaseType The database type to generate the schema for.
 * @returns The prisma client CRUD schema as graphql-js schema object for the given model.
 */
export declare function generateCRUDSchemaFromInternalISDL(model: ISDL, databaseType: DatabaseType): GraphQLSchema;
/**
 * Computes a prisma prisma client CRUD schema for a given model.
 * @param model The model in SDL as string.
 * @param databaseType: The database type implementation to use.
 * @returns The prisma client CRUD schema as prettified string for the given model.
 */
export default function generateCRUDSchemaString(model: string, databaseType?: DatabaseType): string;
