"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var generator_1 = require("../../generator");
var type_1 = require("graphql/type");
var modelWhereInputGenerator_1 = require("../query/modelWhereInputGenerator");
var ModelSubscriptionWhereInput = /** @class */ (function (_super) {
    __extends(ModelSubscriptionWhereInput, _super);
    function ModelSubscriptionWhereInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ModelSubscriptionWhereInput.prototype.getTypeName = function (input, args) {
        return input.name + "SubscriptionWhereInput";
    };
    ModelSubscriptionWhereInput.prototype.getLogicalOperators = function () {
        return ['AND', 'OR', 'NOT'];
    };
    ModelSubscriptionWhereInput.prototype.generateFields = function (model, args) {
        var fields = {
            mutation_in: {
                type: new type_1.GraphQLList(new type_1.GraphQLNonNull(this.generators.mutationType.generate(null, {}))),
            },
            updatedFields_contains: { type: type_1.GraphQLString },
            updatedFields_contains_every: {
                type: new type_1.GraphQLList(new type_1.GraphQLNonNull(type_1.GraphQLString)),
            },
            updatedFields_contains_some: {
                type: new type_1.GraphQLList(new type_1.GraphQLNonNull(type_1.GraphQLString)),
            },
            node: { type: this.generators.modelWhereInput.generate(model, {}) },
        };
        var recursiveFilter = modelWhereInputGenerator_1.default.generateFiltersForSuffix(this.getLogicalOperators(), null, this.generators.scalarTypeGenerator.wrapList(this.generators.modelSubscriptionWhereInput.generate(model, {})));
        fields = generator_1.FieldConfigUtils.merge(fields, recursiveFilter);
        return fields;
    };
    return ModelSubscriptionWhereInput;
}(generator_1.ModelInputObjectTypeGenerator));
exports.default = ModelSubscriptionWhereInput;
//# sourceMappingURL=modelSubscriptionWhereInputGenerator.js.map