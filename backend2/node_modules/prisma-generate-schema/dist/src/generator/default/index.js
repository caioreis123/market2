"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var generator_1 = require("../generator");
var modelCreateInputGenerator_1 = require("./mutation/create/modelCreateInputGenerator");
var modelCreateOneInputGenerator_1 = require("./mutation/create/modelCreateOneInputGenerator");
var modelCreateManyInputGenerator_1 = require("./mutation/create/modelCreateManyInputGenerator");
var modelCreateOneWithoutRelatedInputGenerator_1 = require("./mutation/create/modelCreateOneWithoutRelatedInputGenerator");
var modelCreateWithoutRelatedInputGenerator_ts_1 = require("./mutation/create/modelCreateWithoutRelatedInputGenerator.ts");
var modelCreateManyWithoutRelatedInputGenerator_1 = require("./mutation/create/modelCreateManyWithoutRelatedInputGenerator");
var scalarListCreateInput_1 = require("./mutation/create/scalarListCreateInput");
var modelUpdateInputGenerator_1 = require("./mutation/update/modelUpdateInputGenerator");
var modelUpdateDataInputGenerator_1 = require("./mutation/update/modelUpdateDataInputGenerator");
var modelUpdateManyDataInputGenerator_1 = require("./mutation/update/modelUpdateManyDataInputGenerator");
var modelUpdateOneInputGenerator_1 = require("./mutation/update/modelUpdateOneInputGenerator");
var modelUpdateOneRequiredInputGenerator_1 = require("./mutation/update/modelUpdateOneRequiredInputGenerator");
var modelUpdateManyInputGenerator_1 = require("./mutation/update/modelUpdateManyInputGenerator");
var modelUpdateManyMutationInputGenerator_1 = require("./mutation/update/modelUpdateManyMutationInputGenerator");
var modelUpdateWithoutRelatedDataInputGenerator_1 = require("./mutation/update/modelUpdateWithoutRelatedDataInputGenerator");
var modelUpdateOneWithoutRelatedInputGenerator_1 = require("./mutation/update/modelUpdateOneWithoutRelatedInputGenerator");
var modelUpdateOneRequiredWithoutRelatedInputGenerator_1 = require("./mutation/update/modelUpdateOneRequiredWithoutRelatedInputGenerator");
var modelUpdateManyWithoutRelatedInputGenerator_1 = require("./mutation/update/modelUpdateManyWithoutRelatedInputGenerator");
var modelUpdateWithWhereUniqueNestedInputGenerator_1 = require("./mutation/update/modelUpdateWithWhereUniqueNestedInputGenerator");
var modelUpdateManyWithWhereNestedInputGenerator_1 = require("./mutation/update/modelUpdateManyWithWhereNestedInputGenerator");
var modelUpdateWithWhereUniqueWithoutRelatedInputGenerator_1 = require("./mutation/update/modelUpdateWithWhereUniqueWithoutRelatedInputGenerator");
var scalarListUpdateInput_1 = require("./mutation/update/scalarListUpdateInput");
var modelUpsertNestedInputGenerator_1 = require("./mutation/upsert/modelUpsertNestedInputGenerator");
var modelUpsertWithWhereUniqueWithoutRelatedInputGenerator_1 = require("./mutation/upsert/modelUpsertWithWhereUniqueWithoutRelatedInputGenerator");
var modelUpsertWithoutRelatedInputGenerator_1 = require("./mutation/upsert/modelUpsertWithoutRelatedInputGenerator");
var modelUpsertWithWhereUniqueNestedInputGenerator_1 = require("./mutation/upsert/modelUpsertWithWhereUniqueNestedInputGenerator");
var mutationGenerator_1 = require("./mutation/mutationGenerator");
var subscriptionGenerator_1 = require("./subscription/subscriptionGenerator");
var modelWhereInputGenerator_1 = require("./query/modelWhereInputGenerator");
var modelScalarWhereInputGenerator_1 = require("./query/modelScalarWhereInputGenerator");
var modelWhereUniqueInputGenerator_1 = require("./query/modelWhereUniqueInputGenerator");
var modelOrderByInputGenerator_1 = require("./query/modelOrderByInputGenerator");
var modelEdgeGenerator_1 = require("./query/modelEdgeGenerator");
var modelConnectionGenerator_1 = require("./query/modelConnectionGenerator");
var schemaGenerator_1 = require("./schemaGenerator");
var queryGenerator_1 = require("./query/queryGenerator");
var aggregateModelGenerator_1 = require("./query/aggregateModelGenerator");
var pageInfoGenerator_1 = require("./query/pageInfoGenerator");
var modelGenerator_1 = require("./query/modelGenerator");
var oneQueryArgumentsGenerator_1 = require("./query/oneQueryArgumentsGenerator");
var manyQueryArgumentsGenerator_1 = require("./query/manyQueryArgumentsGenerator");
var uniqueQueryArgumentsGenerator_1 = require("./query/uniqueQueryArgumentsGenerator");
var nodeGenerator_1 = require("./query/nodeGenerator");
var modelSubscriptionPayloadGenerator_1 = require("./subscription/modelSubscriptionPayloadGenerator");
var modelSubscriptionWhereInputGenerator_1 = require("./subscription/modelSubscriptionWhereInputGenerator");
var mutationTypeGenerator_1 = require("./subscription/mutationTypeGenerator");
var modelPreviousValuesGenerator_1 = require("./subscription/modelPreviousValuesGenerator");
var batchPayloadGenerator_1 = require("./mutation/updateMany/batchPayloadGenerator");
var modelEnumTypeGenerator_1 = require("./scalar/modelEnumTypeGenerator");
var scalarTypeGenerator_1 = require("./scalar/scalarTypeGenerator");
/**
 * This class represents a collection of all existing generators. The generators used
 * here depend on each other.
 */
var DefaultGenerator = /** @class */ (function () {
    function DefaultGenerator() {
        this.typeRegistry = new generator_1.TypeRegistry();
        this.modelCreateInput = new modelCreateInputGenerator_1.default(this.typeRegistry, this);
        this.modelCreateOneInput = new modelCreateOneInputGenerator_1.default(this.typeRegistry, this);
        this.modelCreateManyInput = new modelCreateManyInputGenerator_1.default(this.typeRegistry, this);
        this.modelCreateWithoutRelatedInput = new modelCreateWithoutRelatedInputGenerator_ts_1.default(this.typeRegistry, this);
        this.modelCreateOneWithoutRelatedInput = new modelCreateOneWithoutRelatedInputGenerator_1.default(this.typeRegistry, this);
        this.modelCreateManyWithoutRelatedInput = new modelCreateManyWithoutRelatedInputGenerator_1.default(this.typeRegistry, this);
        this.scalarListCreateInput = new scalarListCreateInput_1.default(this.typeRegistry, this);
        this.modelUpdateInput = new modelUpdateInputGenerator_1.default(this.typeRegistry, this);
        this.modelUpdateManyDataInput = new modelUpdateManyDataInputGenerator_1.default(this.typeRegistry, this);
        this.modelUpdateDataInput = new modelUpdateDataInputGenerator_1.default(this.typeRegistry, this);
        this.modelUpdateOneInput = new modelUpdateOneInputGenerator_1.default(this.typeRegistry, this);
        this.modelUpdateOneRequiredInput = new modelUpdateOneRequiredInputGenerator_1.default(this.typeRegistry, this);
        this.modelUpdateManyInput = new modelUpdateManyInputGenerator_1.default(this.typeRegistry, this);
        this.modelUpdateManyMutationInput = new modelUpdateManyMutationInputGenerator_1.default(this.typeRegistry, this);
        this.modelUpdateWithoutRelatedDataInput = new modelUpdateWithoutRelatedDataInputGenerator_1.default(this.typeRegistry, this);
        this.modelUpdateOneWithoutRelatedInput = new modelUpdateOneWithoutRelatedInputGenerator_1.default(this.typeRegistry, this);
        this.modelUpdateOneRequiredWithoutRelatedInput = new modelUpdateOneRequiredWithoutRelatedInputGenerator_1.default(this.typeRegistry, this);
        this.modelUpdateManyWithoutRelatedInput = new modelUpdateManyWithoutRelatedInputGenerator_1.default(this.typeRegistry, this);
        this.modelUpdateWithWhereUniqueWithoutRelatedInput = new modelUpdateWithWhereUniqueWithoutRelatedInputGenerator_1.default(this.typeRegistry, this);
        this.modelUpdateWithWhereUniqueNestedInput = new modelUpdateWithWhereUniqueNestedInputGenerator_1.default(this.typeRegistry, this);
        this.modelUpdateManyWithWhereNestedInput = new modelUpdateManyWithWhereNestedInputGenerator_1.default(this.typeRegistry, this);
        this.scalarListUpdateInput = new scalarListUpdateInput_1.default(this.typeRegistry, this);
        this.modelUpsertNestedInput = new modelUpsertNestedInputGenerator_1.default(this.typeRegistry, this);
        this.modelUpsertWithWhereUniqueWithoutRelatedInput = new modelUpsertWithWhereUniqueWithoutRelatedInputGenerator_1.default(this.typeRegistry, this);
        this.modelUpsertWithoutRelatedInput = new modelUpsertWithoutRelatedInputGenerator_1.default(this.typeRegistry, this);
        this.modelUpsertWithWhereUniqueNestedInput = new modelUpsertWithWhereUniqueNestedInputGenerator_1.default(this.typeRegistry, this);
        this.modelWhereUniqueInput = new modelWhereUniqueInputGenerator_1.default(this.typeRegistry, this);
        this.modelRestrictedWhereInput = new modelWhereInputGenerator_1.default(this.typeRegistry, this); // Dummy
        this.modelWhereInput = new modelWhereInputGenerator_1.default(this.typeRegistry, this);
        this.modelScalarWhereInput = new modelScalarWhereInputGenerator_1.default(this.typeRegistry, this);
        this.modelOrderByInput = new modelOrderByInputGenerator_1.default(this.typeRegistry, this);
        this.modelConnection = new modelConnectionGenerator_1.default(this.typeRegistry, this);
        this.modelEdge = new modelEdgeGenerator_1.default(this.typeRegistry, this);
        this.aggregateModel = new aggregateModelGenerator_1.default(this.typeRegistry, this);
        this.pageInfo = new pageInfoGenerator_1.default(this.typeRegistry, this);
        this.model = new modelGenerator_1.default(this.typeRegistry, this);
        this.oneQueryArguments = new oneQueryArgumentsGenerator_1.default(this.typeRegistry, this);
        this.manyQueryArguments = new manyQueryArgumentsGenerator_1.default(this.typeRegistry, this);
        this.uniqueQueryArguments = new uniqueQueryArgumentsGenerator_1.default(this.typeRegistry, this);
        this.node = new nodeGenerator_1.default(this.typeRegistry, this);
        this.batchPayload = new batchPayloadGenerator_1.default(this.typeRegistry, this);
        this.modelSubscriptionPayload = new modelSubscriptionPayloadGenerator_1.default(this.typeRegistry, this);
        this.modelSubscriptionWhereInput = new modelSubscriptionWhereInputGenerator_1.default(this.typeRegistry, this);
        this.mutationType = new mutationTypeGenerator_1.default(this.typeRegistry, this);
        this.modelPreviousValues = new modelPreviousValuesGenerator_1.default(this.typeRegistry, this);
        this.query = new queryGenerator_1.default(this.typeRegistry, this);
        this.mutation = new mutationGenerator_1.default(this.typeRegistry, this);
        this.subscription = new subscriptionGenerator_1.default(this.typeRegistry, this);
        this.schema = new schemaGenerator_1.default(this.typeRegistry, this);
        this.modelEnumTypeGenerator = new modelEnumTypeGenerator_1.default(this.typeRegistry, this);
        this.scalarTypeGenerator = new scalarTypeGenerator_1.default(this.typeRegistry, this);
    }
    return DefaultGenerator;
}());
exports.default = DefaultGenerator;
//# sourceMappingURL=index.js.map