"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var type_1 = require("graphql/type");
var prisma_datamodel_1 = require("prisma-datamodel");
var generator_1 = require("../../generator");
var SubscriptionGenerator = /** @class */ (function (_super) {
    __extends(SubscriptionGenerator, _super);
    function SubscriptionGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SubscriptionGenerator.prototype.getTypeName = function (input, args) {
        return 'Subscription';
    };
    SubscriptionGenerator.prototype.shouldGenerateSubscription = function (type) {
        return !type.isEnum;
    };
    SubscriptionGenerator.prototype.generateInternal = function (input, args) {
        var _this = this;
        var fieldMaps = input
            .filter(function (type) { return _this.shouldGenerateSubscription(type); })
            .map(function (type) { return _this.generateSubscriptionField(type); });
        return new type_1.GraphQLObjectType({
            name: this.getTypeName(input, args),
            fields: generator_1.FieldConfigUtils.merge.apply(generator_1.FieldConfigUtils, fieldMaps),
        });
    };
    SubscriptionGenerator.prototype.generateSubscriptionField = function (model) {
        var fields = {};
        fields["" + prisma_datamodel_1.camelCase(model.name)] = {
            type: this.generators.modelSubscriptionPayload.generate(model, {}),
            args: {
                where: {
                    type: this.generators.modelSubscriptionWhereInput.generate(model, {}),
                },
            },
        };
        return fields;
    };
    return SubscriptionGenerator;
}(generator_1.RootGenerator));
exports.default = SubscriptionGenerator;
//# sourceMappingURL=subscriptionGenerator.js.map