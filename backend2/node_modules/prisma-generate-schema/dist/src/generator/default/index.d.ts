import { IGenerators, TypeRegistry } from '../generator';
/**
 * This class represents a collection of all existing generators. The generators used
 * here depend on each other.
 */
export default class DefaultGenerator implements IGenerators {
    typeRegistry: TypeRegistry;
    modelCreateInput: any;
    modelCreateOneInput: any;
    modelCreateManyInput: any;
    modelCreateWithoutRelatedInput: any;
    modelCreateOneWithoutRelatedInput: any;
    modelCreateManyWithoutRelatedInput: any;
    scalarListCreateInput: any;
    modelUpdateInput: any;
    modelUpdateManyDataInput: any;
    modelUpdateDataInput: any;
    modelUpdateOneInput: any;
    modelUpdateOneRequiredInput: any;
    modelUpdateManyInput: any;
    modelUpdateManyMutationInput: any;
    modelUpdateWithoutRelatedDataInput: any;
    modelUpdateOneWithoutRelatedInput: any;
    modelUpdateOneRequiredWithoutRelatedInput: any;
    modelUpdateManyWithoutRelatedInput: any;
    modelUpdateWithWhereUniqueWithoutRelatedInput: any;
    modelUpdateWithWhereUniqueNestedInput: any;
    modelUpdateManyWithWhereNestedInput: any;
    scalarListUpdateInput: any;
    modelUpsertNestedInput: any;
    modelUpsertWithWhereUniqueWithoutRelatedInput: any;
    modelUpsertWithoutRelatedInput: any;
    modelUpsertWithWhereUniqueNestedInput: any;
    modelWhereUniqueInput: any;
    modelRestrictedWhereInput: any;
    modelWhereInput: any;
    modelScalarWhereInput: any;
    modelOrderByInput: any;
    modelConnection: any;
    modelEdge: any;
    aggregateModel: any;
    pageInfo: any;
    model: any;
    oneQueryArguments: any;
    manyQueryArguments: any;
    uniqueQueryArguments: any;
    node: any;
    batchPayload: any;
    modelSubscriptionPayload: any;
    modelSubscriptionWhereInput: any;
    mutationType: any;
    modelPreviousValues: any;
    query: any;
    mutation: any;
    subscription: any;
    schema: any;
    modelEnumTypeGenerator: any;
    scalarTypeGenerator: any;
}
