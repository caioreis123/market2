"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utilities_1 = require("graphql/utilities");
var prisma_datamodel_1 = require("prisma-datamodel");
var generator_1 = require("./generator");
/**
 * Schema generator factory for different database types.
 */
var generator_2 = require("./generator");
exports.CRUDSchemaGenerator = generator_2.default;
/**
 * Computes the internal type representation for a model.
 * @param model The model in SDL as string.
 * @param databaseType: The database type implementation to use.
 * @returns An ISDL object containing all types present in the model.
 */
function parseInternalTypes(model, databaseType) {
    return prisma_datamodel_1.DefaultParser.create(databaseType).parseFromSchemaString(model);
}
exports.parseInternalTypes = parseInternalTypes;
/**
 * Computes a prisma prisma client CRUD schema for a given model.
 * @param model The model in SDL as string.
 * @param databaseType: The database type implementation to use.
 * @returns The prisma client CRUD schema as graphql-js schema object for the given model.
 */
function generateCRUDSchema(model, databaseType) {
    var types = parseInternalTypes(model, databaseType).types;
    return generator_1.default.create(databaseType).schema.generate(types.sort(function (_a, _b) {
        var a = _a.name;
        var b = _b.name;
        return (a > b ? 1 : -1);
    }), {});
}
exports.generateCRUDSchema = generateCRUDSchema;
/**
 * Creates a prisma client CRUD schema from a given model.
 * @param model The model as internal type datastructure (ISDL)
 * @param databaseType The database type to generate the schema for.
 * @returns The prisma client CRUD schema as graphql-js schema object for the given model.
 */
function generateCRUDSchemaFromInternalISDL(model, databaseType) {
    return generator_1.default.create(databaseType).schema.generate(model.types, {});
}
exports.generateCRUDSchemaFromInternalISDL = generateCRUDSchemaFromInternalISDL;
/**
 * Computes a prisma prisma client CRUD schema for a given model.
 * @param model The model in SDL as string.
 * @param databaseType: The database type implementation to use.
 * @returns The prisma client CRUD schema as prettified string for the given model.
 */
function generateCRUDSchemaString(model, databaseType) {
    if (databaseType === void 0) { databaseType = prisma_datamodel_1.DatabaseType.postgres; }
    return utilities_1.printSchema(generateCRUDSchema(model, databaseType));
}
exports.default = generateCRUDSchemaString;
//# sourceMappingURL=index.js.map