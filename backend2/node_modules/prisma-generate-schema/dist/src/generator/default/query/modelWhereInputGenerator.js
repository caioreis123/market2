"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var generator_1 = require("../../generator");
var prisma_datamodel_1 = require("prisma-datamodel");
var gqlAssert_1 = require("../../../util/gqlAssert");
var ModelWhereInputGenerator = /** @class */ (function (_super) {
    __extends(ModelWhereInputGenerator, _super);
    function ModelWhereInputGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ModelWhereInputGenerator.generateFiltersForSuffix = function (suffixes, modelField, gqlType) {
        var fields = {};
        for (var _i = 0, suffixes_1 = suffixes; _i < suffixes_1.length; _i++) {
            var suffix = suffixes_1[_i];
            fields["" + (modelField !== null ? modelField.name : '') + suffix] = {
                type: gqlType,
            };
        }
        return fields;
    };
    ModelWhereInputGenerator.prototype.getTypeName = function (input, args) {
        return input.name + "WhereInput";
    };
    //#region Scalar filter generator
    ModelWhereInputGenerator.prototype.generateScalarFilterFields = function (model, field) {
        gqlAssert_1.default.isScalar(field, this.generators.scalarTypeGenerator);
        if (field.isList) {
            return {};
        }
        if (typeof field.type === 'string') {
            switch (field.type) {
                case prisma_datamodel_1.TypeIdentifiers.string:
                case prisma_datamodel_1.TypeIdentifiers.id:
                case prisma_datamodel_1.TypeIdentifiers.uuid:
                    return generator_1.FieldConfigUtils.merge(this.generateBaseFilters(field), this.generateInclusionFilters(field), this.generateAlphanumericFilters(field), this.generateStringFilters(field));
                case prisma_datamodel_1.TypeIdentifiers.integer:
                case prisma_datamodel_1.TypeIdentifiers.float:
                case prisma_datamodel_1.TypeIdentifiers.dateTime:
                    return generator_1.FieldConfigUtils.merge(this.generateBaseFilters(field), this.generateInclusionFilters(field), this.generateAlphanumericFilters(field));
                case prisma_datamodel_1.TypeIdentifiers.boolean:
                    return generator_1.FieldConfigUtils.merge(this.generateBaseFilters(field));
                case prisma_datamodel_1.TypeIdentifiers.json:
                    return generator_1.FieldConfigUtils.merge();
                default:
                    gqlAssert_1.default.raise("Type " + field.type + " is not implemented by ModelWhereInputGenerator.generateScalarFilterFields.");
                    return {};
            }
        }
        else if (field.type.isEnum) {
            return generator_1.FieldConfigUtils.merge(this.generateBaseFilters(field), this.generateInclusionFilters(field));
        }
        else {
            gqlAssert_1.default.raise("Type for filter generation was neither enum nor scalar type.");
            return {};
        }
    };
    ModelWhereInputGenerator.prototype.generateBaseFilters = function (field) {
        var type = this.generators.scalarTypeGenerator.generate(field.type, {});
        return ModelWhereInputGenerator.generateFiltersForSuffix(['', '_not'], field, type);
    };
    ModelWhereInputGenerator.prototype.generateInclusionFilters = function (field) {
        var type = this.generators.scalarTypeGenerator.wrapList(this.generators.scalarTypeGenerator.generate(field.type, {}));
        return ModelWhereInputGenerator.generateFiltersForSuffix(['_in', '_not_in'], field, type);
    };
    ModelWhereInputGenerator.prototype.generateAlphanumericFilters = function (field) {
        var type = this.generators.scalarTypeGenerator.generate(field.type, {});
        return ModelWhereInputGenerator.generateFiltersForSuffix(['_lt', '_lte', '_gt', '_gte'], field, type);
    };
    ModelWhereInputGenerator.prototype.generateStringFilters = function (field) {
        var type = this.generators.scalarTypeGenerator.generate(field.type, {});
        var filters = [
            '_contains',
            '_not_contains',
            '_starts_with',
            '_not_starts_with',
            '_ends_with',
            '_not_ends_with',
        ];
        return ModelWhereInputGenerator.generateFiltersForSuffix(filters, field, type);
    };
    //#endregion
    //#region Relation filter generator
    ModelWhereInputGenerator.prototype.generateRelationFilterFields = function (model, field) {
        gqlAssert_1.default.isRelation(field, this.generators.scalarTypeGenerator);
        if (field.isList) {
            return this.generateManyRelationFilterFields(field);
        }
        else {
            return this.generateOneRelationFilterFields(field);
        }
    };
    ModelWhereInputGenerator.prototype.generateOneRelationFilterFields = function (field) {
        var type = this.generate(field.type, {});
        return ModelWhereInputGenerator.generateFiltersForSuffix([''], field, type);
    };
    ModelWhereInputGenerator.prototype.generateManyRelationFilterFields = function (field) {
        var type = this.generate(field.type, {});
        return ModelWhereInputGenerator.generateFiltersForSuffix(this.getRelationaManyFilters(field.type), field, type);
    };
    //#endregion
    ModelWhereInputGenerator.prototype.getRelationaManyFilters = function (type) {
        return ['_every', '_some', '_none'];
    };
    ModelWhereInputGenerator.prototype.getLogicalOperators = function () {
        return ['AND', 'OR', 'NOT'];
    };
    ModelWhereInputGenerator.prototype.generateFields = function (model, args) {
        var fields = {};
        for (var _i = 0, _a = model.fields; _i < _a.length; _i++) {
            var field = _a[_i];
            var fieldsToAdd = this.generators.scalarTypeGenerator.isScalarField(field)
                ? this.generateScalarFilterFields(model, field)
                : this.generateRelationFilterFields(model, field);
            if (fieldsToAdd !== null) {
                fields = generator_1.FieldConfigUtils.merge(fields, fieldsToAdd);
            }
        }
        var recursiveFilter = ModelWhereInputGenerator.generateFiltersForSuffix(this.getLogicalOperators(), null, this.generators.scalarTypeGenerator.wrapList(this.generate(model, {})));
        fields = generator_1.FieldConfigUtils.merge(fields, recursiveFilter);
        return fields;
    };
    return ModelWhereInputGenerator;
}(generator_1.ModelInputObjectTypeGenerator));
exports.default = ModelWhereInputGenerator;
//# sourceMappingURL=modelWhereInputGenerator.js.map