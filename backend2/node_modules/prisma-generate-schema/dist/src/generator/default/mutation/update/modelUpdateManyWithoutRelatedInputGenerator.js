"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var generator_1 = require("../../../generator");
var prisma_datamodel_1 = require("prisma-datamodel");
var ModelUpdateManyWithoutRelatedInputTypeGenerator = /** @class */ (function (_super) {
    __extends(ModelUpdateManyWithoutRelatedInputTypeGenerator, _super);
    function ModelUpdateManyWithoutRelatedInputTypeGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ModelUpdateManyWithoutRelatedInputTypeGenerator.prototype.wouldBeEmpty = function (model, args) {
        return (this.generators.modelCreateWithoutRelatedInput.wouldBeEmpty(model, args) && this.generators.modelWhereUniqueInput.wouldBeEmpty(model, args));
    };
    ModelUpdateManyWithoutRelatedInputTypeGenerator.prototype.getTypeName = function (input, args) {
        var field = args.relatedField.relatedField;
        return input.name + "UpdateManyWithout" + prisma_datamodel_1.capitalize(field.name) + "Input";
    };
    ModelUpdateManyWithoutRelatedInputTypeGenerator.prototype.generateFields = function (model, args) {
        var fields = {};
        if (!this.generators.modelCreateWithoutRelatedInput.wouldBeEmpty(model, args)) {
            fields.create = {
                type: this.generators.scalarTypeGenerator.wrapList(this.generators.modelCreateWithoutRelatedInput.generate(model, args)),
            };
        }
        if (!this.generators.modelWhereUniqueInput.wouldBeEmpty(model, args)) {
            fields.delete = {
                type: this.generators.scalarTypeGenerator.wrapList(this.generators.modelWhereUniqueInput.generate(model, args)),
            };
            fields.connect = {
                type: this.generators.scalarTypeGenerator.wrapList(this.generators.modelWhereUniqueInput.generate(model, args)),
            };
            fields.set = {
                type: this.generators.scalarTypeGenerator.wrapList(this.generators.modelWhereUniqueInput.generate(model, args)),
            };
            fields.disconnect = {
                type: this.generators.scalarTypeGenerator.wrapList(this.generators.modelWhereUniqueInput.generate(model, args)),
            };
        }
        if (!this.generators.modelUpdateWithWhereUniqueWithoutRelatedInput.wouldBeEmpty(model, args)) {
            fields.update = {
                type: this.generators.scalarTypeGenerator.wrapList(this.generators.modelUpdateWithWhereUniqueWithoutRelatedInput.generate(model, args)),
            };
            fields.upsert = {
                type: this.generators.scalarTypeGenerator.wrapList(this.generators.modelUpsertWithWhereUniqueWithoutRelatedInput.generate(model, args)),
            };
        }
        if (!this.generators.modelScalarWhereInput.wouldBeEmpty(model, args)) {
            fields.deleteMany = {
                type: this.generators.scalarTypeGenerator.wrapList(this.generators.modelScalarWhereInput.generate(model, args)),
            };
        }
        if (!this.generators.modelUpdateManyWithWhereNestedInput.wouldBeEmpty(model, args)) {
            fields.updateMany = {
                type: this.generators.scalarTypeGenerator.wrapList(this.generators.modelUpdateManyWithWhereNestedInput.generate(model, args)),
            };
        }
        return fields;
    };
    return ModelUpdateManyWithoutRelatedInputTypeGenerator;
}(generator_1.RelatedModelInputObjectTypeGenerator));
exports.default = ModelUpdateManyWithoutRelatedInputTypeGenerator;
//# sourceMappingURL=modelUpdateManyWithoutRelatedInputGenerator.js.map